#!/usr/bin/env python

## Retrieves passwords using the `pass` utility

import getpass
import os
import os.path
import subprocess as sp
import sys

from functools import wraps


def oops(msg):
    sys.stderr.write("{}\n".format(msg))


def parse_input():
    return dict(map(tuple,
                    map(lambda e: e.split("="),
                        map(str.strip, sys.stdin.readlines()))))


def get_key(req):
    host = req["host"]
    return "personal/{}/git/{}".format(getpass.getuser(), host)


def with_input(fn):
    @wraps(fn)
    def _with_input(*args, **kwargs):
        req = parse_input()
        return fn(req, *args, **kwargs)
    return _with_input


def https_only(fn):
    @wraps(fn)
    def _https_only(req, *args, **kwargs):
        if req["protocol"] != "https":
            return 1
        return fn(req, *args, **kwargs)
    return _https_only


@with_input
@https_only
def get_password(req):
    key = get_key(req)
    cmd = ["pass", "show", key]
    try:
        passwd = sp.check_output(cmd)
    except sp.CalledProcessError:
        return 2
    else:
        print("password={}".format(passwd.decode("utf-8").strip()))
    return 0


@with_input
@https_only
def store_password(req):
    key = get_key(req)
    cmd = ["pass", "show", key]
    try:
        sp.check_output(cmd)
    except sp.CalledProcessError:
        oops("'store' action has not been implemented")
        return 1
    else:
        return 0


def erase_password():
    oops("'erase' action has not been implemented")
    return 1


def main(argv):
    try:
        action = argv.pop(0)
    except IndexError:
        oops("No action specified")
        return 0

    if action == "get":
        return get_password()
    elif action == "store":
        return store_password()
    elif action == "erase":
        return erase_password()
    else:
        oops("Unknown action: {}\n".format(action))
    return 0


if __name__ == "__main__":
    sys.exit(main(sys.argv[1:]))
